---
source: prqlc/prqlc/src/cli/test.rs
info:
  program: prqlc
  args:
    - "--color=never"
    - shell-completion
    - fish
  env:
    CLICOLOR_FORCE: ""
    NO_COLOR: "1"
    RUST_BACKTRACE: ""
    RUST_LOG: ""
---
success: true
exit_code: 0
----- stdout -----
# Print an optspec for argparse to handle cmd's options that are independent of any subcommand.
function __fish_prqlc_global_optspecs
	string join \n color= h/help V/version
end

function __fish_prqlc_needs_command
	# Figure out if the current invocation already has a command.
	set -l cmd (commandline -opc)
	set -e cmd[1]
	argparse -s (__fish_prqlc_global_optspecs) -- $cmd 2>/dev/null
	or return
	if set -q argv[1]
		# Also print the command, so this can be used to figure out what it is.
		echo $argv[1]
		return 1
	end
	return 0
end

function __fish_prqlc_using_subcommand
	set -l cmd (__fish_prqlc_needs_command)
	test -z "$cmd"
	and return 1
	contains -- $cmd[1] $argv
end

complete -c prqlc -n "__fish_prqlc_needs_command" -l color -d 'Controls when to use color' -r -f -a "{auto\t'',always\t'',never\t''}"
complete -c prqlc -n "__fish_prqlc_needs_command" -s h -l help -d 'Print help'
complete -c prqlc -n "__fish_prqlc_needs_command" -s V -l version -d 'Print version'
complete -c prqlc -n "__fish_prqlc_needs_command" -f -a "parse" -d 'Parse into PL AST'
complete -c prqlc -n "__fish_prqlc_needs_command" -f -a "lex" -d 'Lex into Lexer Representation'
complete -c prqlc -n "__fish_prqlc_needs_command" -f -a "fmt" -d 'Parse & generate PRQL code back'
complete -c prqlc -n "__fish_prqlc_needs_command" -f -a "collect" -d 'Parse the whole project and collect it into a single PRQL source file'
complete -c prqlc -n "__fish_prqlc_needs_command" -f -a "debug" -d 'Commands for meant for debugging, prone to change'
complete -c prqlc -n "__fish_prqlc_needs_command" -f -a "experimental" -d 'Experimental commands are prone to change'
complete -c prqlc -n "__fish_prqlc_needs_command" -f -a "compile" -d 'Parse, resolve, lower into RQ & compile to SQL'
complete -c prqlc -n "__fish_prqlc_needs_command" -f -a "watch" -d 'Watch a directory and compile .prql files to .sql files'
complete -c prqlc -n "__fish_prqlc_needs_command" -f -a "list-targets" -d 'Show available compile target names'
complete -c prqlc -n "__fish_prqlc_needs_command" -f -a "shell-completion" -d 'Print a shell completion for supported shells'
complete -c prqlc -n "__fish_prqlc_needs_command" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c prqlc -n "__fish_prqlc_using_subcommand parse" -l format -r -f -a "{json\t'',yaml\t''}"
complete -c prqlc -n "__fish_prqlc_using_subcommand parse" -l color -d 'Controls when to use color' -r -f -a "{auto\t'',always\t'',never\t''}"
complete -c prqlc -n "__fish_prqlc_using_subcommand parse" -s h -l help -d 'Print help'
complete -c prqlc -n "__fish_prqlc_using_subcommand lex" -l format -r -f -a "{json\t'',yaml\t''}"
complete -c prqlc -n "__fish_prqlc_using_subcommand lex" -l color -d 'Controls when to use color' -r -f -a "{auto\t'',always\t'',never\t''}"
complete -c prqlc -n "__fish_prqlc_using_subcommand lex" -s h -l help -d 'Print help'
complete -c prqlc -n "__fish_prqlc_using_subcommand fmt" -l color -d 'Controls when to use color' -r -f -a "{auto\t'',always\t'',never\t''}"
complete -c prqlc -n "__fish_prqlc_using_subcommand fmt" -s h -l help -d 'Print help'
complete -c prqlc -n "__fish_prqlc_using_subcommand collect" -l color -d 'Controls when to use color' -r -f -a "{auto\t'',always\t'',never\t''}"
complete -c prqlc -n "__fish_prqlc_using_subcommand collect" -s h -l help -d 'Print help'
complete -c prqlc -n "__fish_prqlc_using_subcommand debug; and not __fish_seen_subcommand_from annotate lineage ast json-schema help" -l color -d 'Controls when to use color' -r -f -a "{auto\t'',always\t'',never\t''}"
complete -c prqlc -n "__fish_prqlc_using_subcommand debug; and not __fish_seen_subcommand_from annotate lineage ast json-schema help" -s h -l help -d 'Print help'
complete -c prqlc -n "__fish_prqlc_using_subcommand debug; and not __fish_seen_subcommand_from annotate lineage ast json-schema help" -f -a "annotate" -d 'Parse, resolve & combine source with comments annotating relation type'
complete -c prqlc -n "__fish_prqlc_using_subcommand debug; and not __fish_seen_subcommand_from annotate lineage ast json-schema help" -f -a "lineage" -d 'Output column-level lineage graph'
complete -c prqlc -n "__fish_prqlc_using_subcommand debug; and not __fish_seen_subcommand_from annotate lineage ast json-schema help" -f -a "ast" -d 'Print info about the AST data structure'
complete -c prqlc -n "__fish_prqlc_using_subcommand debug; and not __fish_seen_subcommand_from annotate lineage ast json-schema help" -f -a "json-schema" -d 'Print JSON Schema'
complete -c prqlc -n "__fish_prqlc_using_subcommand debug; and not __fish_seen_subcommand_from annotate lineage ast json-schema help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c prqlc -n "__fish_prqlc_using_subcommand debug; and __fish_seen_subcommand_from annotate" -l color -d 'Controls when to use color' -r -f -a "{auto\t'',always\t'',never\t''}"
complete -c prqlc -n "__fish_prqlc_using_subcommand debug; and __fish_seen_subcommand_from annotate" -s h -l help -d 'Print help'
complete -c prqlc -n "__fish_prqlc_using_subcommand debug; and __fish_seen_subcommand_from lineage" -l format -r -f -a "{json\t'',yaml\t''}"
complete -c prqlc -n "__fish_prqlc_using_subcommand debug; and __fish_seen_subcommand_from lineage" -l color -d 'Controls when to use color' -r -f -a "{auto\t'',always\t'',never\t''}"
complete -c prqlc -n "__fish_prqlc_using_subcommand debug; and __fish_seen_subcommand_from lineage" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c prqlc -n "__fish_prqlc_using_subcommand debug; and __fish_seen_subcommand_from ast" -l color -d 'Controls when to use color' -r -f -a "{auto\t'',always\t'',never\t''}"
complete -c prqlc -n "__fish_prqlc_using_subcommand debug; and __fish_seen_subcommand_from ast" -s h -l help -d 'Print help'
complete -c prqlc -n "__fish_prqlc_using_subcommand debug; and __fish_seen_subcommand_from json-schema" -l ir-type -r -f -a "{pl\t'',rq\t'',lineage\t''}"
complete -c prqlc -n "__fish_prqlc_using_subcommand debug; and __fish_seen_subcommand_from json-schema" -l color -d 'Controls when to use color' -r -f -a "{auto\t'',always\t'',never\t''}"
complete -c prqlc -n "__fish_prqlc_using_subcommand debug; and __fish_seen_subcommand_from json-schema" -s h -l help -d 'Print help'
complete -c prqlc -n "__fish_prqlc_using_subcommand debug; and __fish_seen_subcommand_from help" -f -a "annotate" -d 'Parse, resolve & combine source with comments annotating relation type'
complete -c prqlc -n "__fish_prqlc_using_subcommand debug; and __fish_seen_subcommand_from help" -f -a "lineage" -d 'Output column-level lineage graph'
complete -c prqlc -n "__fish_prqlc_using_subcommand debug; and __fish_seen_subcommand_from help" -f -a "ast" -d 'Print info about the AST data structure'
complete -c prqlc -n "__fish_prqlc_using_subcommand debug; and __fish_seen_subcommand_from help" -f -a "json-schema" -d 'Print JSON Schema'
complete -c prqlc -n "__fish_prqlc_using_subcommand debug; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c prqlc -n "__fish_prqlc_using_subcommand experimental; and not __fish_seen_subcommand_from doc highlight help" -l color -d 'Controls when to use color' -r -f -a "{auto\t'',always\t'',never\t''}"
complete -c prqlc -n "__fish_prqlc_using_subcommand experimental; and not __fish_seen_subcommand_from doc highlight help" -s h -l help -d 'Print help'
complete -c prqlc -n "__fish_prqlc_using_subcommand experimental; and not __fish_seen_subcommand_from doc highlight help" -f -a "doc" -d 'Generate Markdown documentation'
complete -c prqlc -n "__fish_prqlc_using_subcommand experimental; and not __fish_seen_subcommand_from doc highlight help" -f -a "highlight" -d 'Syntax highlight'
complete -c prqlc -n "__fish_prqlc_using_subcommand experimental; and not __fish_seen_subcommand_from doc highlight help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c prqlc -n "__fish_prqlc_using_subcommand experimental; and __fish_seen_subcommand_from doc" -l format -r -f -a "{html\t'',markdown\t''}"
complete -c prqlc -n "__fish_prqlc_using_subcommand experimental; and __fish_seen_subcommand_from doc" -l color -d 'Controls when to use color' -r -f -a "{auto\t'',always\t'',never\t''}"
complete -c prqlc -n "__fish_prqlc_using_subcommand experimental; and __fish_seen_subcommand_from doc" -s h -l help -d 'Print help'
complete -c prqlc -n "__fish_prqlc_using_subcommand experimental; and __fish_seen_subcommand_from highlight" -l color -d 'Controls when to use color' -r -f -a "{auto\t'',always\t'',never\t''}"
complete -c prqlc -n "__fish_prqlc_using_subcommand experimental; and __fish_seen_subcommand_from highlight" -s h -l help -d 'Print help'
complete -c prqlc -n "__fish_prqlc_using_subcommand experimental; and __fish_seen_subcommand_from help" -f -a "doc" -d 'Generate Markdown documentation'
complete -c prqlc -n "__fish_prqlc_using_subcommand experimental; and __fish_seen_subcommand_from help" -f -a "highlight" -d 'Syntax highlight'
complete -c prqlc -n "__fish_prqlc_using_subcommand experimental; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c prqlc -n "__fish_prqlc_using_subcommand compile" -s t -l target -d 'Target to compile to' -r
complete -c prqlc -n "__fish_prqlc_using_subcommand compile" -l debug-log -d 'File path into which to write the debug log to' -r -F
complete -c prqlc -n "__fish_prqlc_using_subcommand compile" -l color -d 'Controls when to use color' -r -f -a "{auto\t'',always\t'',never\t''}"
complete -c prqlc -n "__fish_prqlc_using_subcommand compile" -l hide-signature-comment -d 'Exclude the signature comment containing the PRQL version'
complete -c prqlc -n "__fish_prqlc_using_subcommand compile" -l no-format -d 'Emit unformatted, dense SQL'
complete -c prqlc -n "__fish_prqlc_using_subcommand compile" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c prqlc -n "__fish_prqlc_using_subcommand watch" -l color -d 'Controls when to use color' -r -f -a "{auto\t'',always\t'',never\t''}"
complete -c prqlc -n "__fish_prqlc_using_subcommand watch" -l no-format
complete -c prqlc -n "__fish_prqlc_using_subcommand watch" -l no-signature
complete -c prqlc -n "__fish_prqlc_using_subcommand watch" -s h -l help -d 'Print help'
complete -c prqlc -n "__fish_prqlc_using_subcommand list-targets" -l color -d 'Controls when to use color' -r -f -a "{auto\t'',always\t'',never\t''}"
complete -c prqlc -n "__fish_prqlc_using_subcommand list-targets" -s h -l help -d 'Print help'
complete -c prqlc -n "__fish_prqlc_using_subcommand shell-completion" -l color -d 'Controls when to use color' -r -f -a "{auto\t'',always\t'',never\t''}"
complete -c prqlc -n "__fish_prqlc_using_subcommand shell-completion" -s h -l help -d 'Print help'
complete -c prqlc -n "__fish_prqlc_using_subcommand help; and not __fish_seen_subcommand_from parse lex fmt collect debug experimental compile watch list-targets shell-completion help" -f -a "parse" -d 'Parse into PL AST'
complete -c prqlc -n "__fish_prqlc_using_subcommand help; and not __fish_seen_subcommand_from parse lex fmt collect debug experimental compile watch list-targets shell-completion help" -f -a "lex" -d 'Lex into Lexer Representation'
complete -c prqlc -n "__fish_prqlc_using_subcommand help; and not __fish_seen_subcommand_from parse lex fmt collect debug experimental compile watch list-targets shell-completion help" -f -a "fmt" -d 'Parse & generate PRQL code back'
complete -c prqlc -n "__fish_prqlc_using_subcommand help; and not __fish_seen_subcommand_from parse lex fmt collect debug experimental compile watch list-targets shell-completion help" -f -a "collect" -d 'Parse the whole project and collect it into a single PRQL source file'
complete -c prqlc -n "__fish_prqlc_using_subcommand help; and not __fish_seen_subcommand_from parse lex fmt collect debug experimental compile watch list-targets shell-completion help" -f -a "debug" -d 'Commands for meant for debugging, prone to change'
complete -c prqlc -n "__fish_prqlc_using_subcommand help; and not __fish_seen_subcommand_from parse lex fmt collect debug experimental compile watch list-targets shell-completion help" -f -a "experimental" -d 'Experimental commands are prone to change'
complete -c prqlc -n "__fish_prqlc_using_subcommand help; and not __fish_seen_subcommand_from parse lex fmt collect debug experimental compile watch list-targets shell-completion help" -f -a "compile" -d 'Parse, resolve, lower into RQ & compile to SQL'
complete -c prqlc -n "__fish_prqlc_using_subcommand help; and not __fish_seen_subcommand_from parse lex fmt collect debug experimental compile watch list-targets shell-completion help" -f -a "watch" -d 'Watch a directory and compile .prql files to .sql files'
complete -c prqlc -n "__fish_prqlc_using_subcommand help; and not __fish_seen_subcommand_from parse lex fmt collect debug experimental compile watch list-targets shell-completion help" -f -a "list-targets" -d 'Show available compile target names'
complete -c prqlc -n "__fish_prqlc_using_subcommand help; and not __fish_seen_subcommand_from parse lex fmt collect debug experimental compile watch list-targets shell-completion help" -f -a "shell-completion" -d 'Print a shell completion for supported shells'
complete -c prqlc -n "__fish_prqlc_using_subcommand help; and not __fish_seen_subcommand_from parse lex fmt collect debug experimental compile watch list-targets shell-completion help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c prqlc -n "__fish_prqlc_using_subcommand help; and __fish_seen_subcommand_from debug" -f -a "annotate" -d 'Parse, resolve & combine source with comments annotating relation type'
complete -c prqlc -n "__fish_prqlc_using_subcommand help; and __fish_seen_subcommand_from debug" -f -a "lineage" -d 'Output column-level lineage graph'
complete -c prqlc -n "__fish_prqlc_using_subcommand help; and __fish_seen_subcommand_from debug" -f -a "ast" -d 'Print info about the AST data structure'
complete -c prqlc -n "__fish_prqlc_using_subcommand help; and __fish_seen_subcommand_from debug" -f -a "json-schema" -d 'Print JSON Schema'
complete -c prqlc -n "__fish_prqlc_using_subcommand help; and __fish_seen_subcommand_from experimental" -f -a "doc" -d 'Generate Markdown documentation'
complete -c prqlc -n "__fish_prqlc_using_subcommand help; and __fish_seen_subcommand_from experimental" -f -a "highlight" -d 'Syntax highlight'

----- stderr -----
